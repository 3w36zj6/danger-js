import { DangerResults } from "../../dsl/DangerResults"
import { Violation } from "../../dsl/Violation"

// Getting emoji from here
// https://bitbucket.org/DACOFFEY/wiki/wiki/BITBUCKET/EMOJI/Emoji
const noEntryEmoji = ":x:"
const warningEmoji = ":warning️:"
const messageEmoji = ":sparkles:"

export const dangerSignature = (results: DangerResults) => {
  let meta = results.meta || { runtimeName: "dangerJS", runtimeHref: "https://danger.systems/js" }
  return `Generated by ${warningEmoji} [${meta.runtimeName}](${meta.runtimeHref})`
}

export const messageForResultWithIssues = `${warningEmoji} Danger found some issues. Don't worry, everything is fixable.`

export const dangerIDToString = (id: string) => `danger-id-${id};`

/**
 * Postfix signature to be attached comment generated / updated by danger.
 */
export const dangerSignaturePostfix = (results: DangerResults, commitID: string) => `
  |    |
  |---:|
  | _${dangerSignature(results)} against ${commitID}_ |
  `

function buildMarkdownTable(header: string, emoji: string, violations: Violation[]): string {
  if (violations.length === 0 || violations.every(violation => !violation.message)) {
    return ""
  }
  return `
  |   | ${header} |
  | -: | ------ |
  ${violations.map(v => `| ${emoji} | ${v.message} |`)}`
}

/**
 * A template function for creating a GitHub issue comment from Danger Results
 * @param {string} dangerID A string that represents a unique build
 * @param {string} commitID The hash that represents the latest commit
 * @param {DangerResults} results Data to work with
 * @returns {string} HTML
 */
export function template(dangerID: string, commitID: string, results: DangerResults): string {
  return `
  ${buildMarkdownTable("Fails", noEntryEmoji, results.fails)}

  ${buildMarkdownTable("Warnings", warningEmoji, results.warnings)}

  ${buildMarkdownTable("Messages", messageEmoji, results.messages)}
  
  ${results.markdowns.map(v => v.message).join("\n\n")}
  
  ${dangerSignaturePostfix(results, commitID)}
  
  [](http://${dangerIDToString(dangerID)})
  `
}
