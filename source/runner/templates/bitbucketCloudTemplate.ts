import { DangerResults } from "../../dsl/DangerResults"
import { Violation } from "../../dsl/Violation"

// This unicode emojis also work for old versions of bitbucket server, were emojis are not supported
const noEntryEmoji = "❌"
const warningEmoji = "⚠️"
const messageEmoji = "✨"

export const dangerSignature = (results: DangerResults) => {
  let meta = results.meta || { runtimeName: "dangerJS", runtimeHref: "https://danger.systems/js" }
  return `Generated by ${warningEmoji} [${meta.runtimeName}](${meta.runtimeHref})`
}

export const messageForResultWithIssues = `${warningEmoji} Danger found some issues. Don't worry, everything is fixable.`

export const dangerIDToString = (id: string) => `danger-id-${id};`

/**
 * Postfix signature to be attached comment generated / updated by danger.
 */
export const dangerSignaturePostfix = (results: DangerResults, commitID: string) => `


  > _${dangerSignature(results)} against ${commitID}
  `

function buildMarkdownTable(header: string, emoji: string, violations: Violation[]): string {
  if (violations.length === 0 || violations.every(violation => !violation.message)) {
    return ""
  }
  return `

  |      ${violations.length} ${header} |
  | --- |
  ${violations.map(v => `| ${emoji} ${v.message} |`)}

  `
}

/**
 * A template function for creating a GitHub issue comment from Danger Results
 * @param {string} dangerID A string that represents a unique build
 * @param {string} commitID The hash that represents the latest commit
 * @param {DangerResults} results Data to work with
 * @returns {string} HTML
 */
export function template(dangerID: string, commitID: string, results: DangerResults): string {
  return `
  ${buildMarkdownTable("Fails", noEntryEmoji, results.fails)}
  ${buildMarkdownTable("Warnings", warningEmoji, results.warnings)}
  ${buildMarkdownTable("Messages", messageEmoji, results.messages)}
  
  ${results.markdowns.map(v => v.message).join("\n\n")}
  
  ${dangerSignaturePostfix(results, commitID)}
  
  [](http://${dangerIDToString(dangerID)})
  `
}
